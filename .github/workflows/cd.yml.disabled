name: EMRsim-chat CD

on:
    push:
        branches: [main]
    workflow_dispatch:
        inputs:
            environment:
                description: "Deployment environment"
                required: true
                default: "staging"
                type: choice
                options:
                    - staging
                    - production

jobs:
    deploy-infrastructure:
        name: Deploy Azure Infrastructure
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.environment || 'staging' }}

        steps:
            - uses: actions/checkout@v3

            - name: Log in to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Deploy ARM Template
              uses: azure/arm-deploy@v1
              with:
                  resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
                  template: ./infrastructure/main.bicep
                  parameters: >
                      environment=${{ github.event.inputs.environment || 'staging' }}
                      administratorLogin=${{ secrets.PG_ADMIN_USERNAME }}
                      administratorLoginPassword=${{ secrets.PG_ADMIN_PASSWORD }}

            - name: Export Infrastructure Outputs
              id: armOutputs
              run: |
                  outputs=$(az deployment group show --name main --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query properties.outputs)
                  echo "::set-output name=webAppName::$(echo $outputs | jq -r .webAppName.value)"
                  echo "::set-output name=staticWebAppName::$(echo $outputs | jq -r .staticWebAppName.value)"

    deploy-backend:
        name: Deploy Backend
        runs-on: ubuntu-latest
        needs: deploy-infrastructure
        environment: ${{ github.event.inputs.environment || 'staging' }}

        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build backend
              run: npm run build:server

            - name: Log in to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Deploy to Azure Web App
              id: deploy-to-webapp
              uses: azure/webapps-deploy@v2
              with:
                  app-name: ${{ needs.deploy-infrastructure.outputs.webAppName }}
                  slot-name: "staging"
                  package: ./dist/server

            - name: Apply database migrations
              run: |
                  npm run db:migrate
              env:
                  DB_TYPE: postgres
                  PG_HOST: ${{ secrets.PG_HOST }}
                  PG_PORT: ${{ secrets.PG_PORT }}
                  PG_DATABASE: ${{ secrets.PG_DATABASE }}
                  PG_USER: ${{ secrets.PG_USER }}
                  PG_PASSWORD: ${{ secrets.PG_PASSWORD }}

            - name: Run smoke tests on staging slot
              run: npm run test:smoke
              env:
                  API_URL: https://${{ needs.deploy-infrastructure.outputs.webAppName }}-staging.azurewebsites.net

            - name: Swap staging and production slots
              if: github.event.inputs.environment == 'production'
              run: |
                  az webapp deployment slot swap -n ${{ needs.deploy-infrastructure.outputs.webAppName }} -g ${{ secrets.AZURE_RESOURCE_GROUP }} --slot staging --target-slot production

    deploy-frontend:
        name: Deploy Frontend
        runs-on: ubuntu-latest
        needs: [deploy-infrastructure, deploy-backend]
        environment: ${{ github.event.inputs.environment || 'staging' }}

        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build frontend
              run: npm run build:client
              env:
                  REACT_APP_API_URL: https://${{ needs.deploy-infrastructure.outputs.webAppName }}.azurewebsites.net
                  REACT_APP_ENV: ${{ github.event.inputs.environment || 'staging' }}

            - name: Deploy to Azure Static Web App
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ secrets.STATIC_WEB_APP_TOKEN }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: "upload"
                  app_location: "/dist/client"
                  api_location: ""
                  output_location: ""

    post-deployment:
        name: Post Deployment Tasks
        runs-on: ubuntu-latest
        needs: [deploy-backend, deploy-frontend]
        environment: ${{ github.event.inputs.environment || 'staging' }}

        steps:
            - name: Run end-to-end tests on deployed environment
              run: |
                  npm run test:e2e:deployed
              env:
                  BASE_URL: https://${{ needs.deploy-infrastructure.outputs.staticWebAppName }}.azurestaticapps.net

            - name: Run performance tests
              run: |
                  npm run test:performance
              env:
                  TARGET_URL: https://${{ needs.deploy-infrastructure.outputs.staticWebAppName }}.azurestaticapps.net

            - name: Send deployment notification
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  SLACK_TITLE: "Deployment Completed âœ…"
                  SLACK_MESSAGE: "EMRsim-chat has been deployed to ${{ github.event.inputs.environment || 'staging' }}"
                  SLACK_COLOR: ${{ job.status }}
