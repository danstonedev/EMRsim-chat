#!/usr/bin/env node
/*
  Generate animations manifest from public/models/animations/*.glb
  Writes to src/pages/components/viewer/animations/generated.manifest.ts
*/
import { readdirSync, writeFileSync } from 'node:fs'
import { join } from 'node:path'

const root = process.cwd()
const ANIMS_DIR = join(root, 'public', 'models', 'animations')
const OUT_FILE = join(root, 'src', 'pages', 'components', 'viewer', 'animations', 'generated.manifest.ts')

function toSpec(id: string) {
  return `  { id: '${id}', path: p('${id}'), loop: 'repeat', speed: 0.5 }`
}

function run() {
  const files = readdirSync(ANIMS_DIR)
    .filter(f => f.toLowerCase().endsWith('.glb'))
    .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))

  const content = `// AUTO-GENERATED FILE. Do not edit manually.
// Generated by scripts/generate-animations-manifest.ts

export type LoopPolicy = 'repeat' | 'once'
export type AnimationSpec = {
  id: string
  path: string
  clipIndex?: number
  clipName?: string
  loop: LoopPolicy
  speed?: number
}

const BASE = (import.meta as any).env?.BASE_URL || '/'
const p = (file: string) => BASE + 'models/animations/' + file

export const ANIMATIONS: AnimationSpec[] = [
${files.map(toSpec).join(',\n')}
]

export const DEFAULT_ANIMATION_ID = 'Stand.glb'
`

  writeFileSync(OUT_FILE, content, 'utf8')
  console.log(`[gen] Wrote ${files.length} animations to ${OUT_FILE}`)
}

run()
