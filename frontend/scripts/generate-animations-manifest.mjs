#!/usr/bin/env node
// Generate animations manifest from public/models/animations/*.glb
// Writes to src/pages/components/viewer/animations/manifest.ts
import { readdirSync, writeFileSync } from 'node:fs'
import { join } from 'node:path'

const root = process.cwd()
const ANIMS_DIR = join(root, 'public', 'models', 'animations')
const OUT_FILE = join(root, 'src', 'pages', 'components', 'viewer', 'animations', 'manifest.ts')

// The header preserves the same types and helpers used by the app.
// Avoid nested template literals inside this template by using string concatenation for `p`.
const header = `// Animation manifest defines deterministic, filename-based animations and playback policies\n// AUTO-GENERATED by scripts/generate-animations-manifest.mjs\n// Edit the generator instead of this file.\n\nexport type LoopPolicy = 'repeat' | 'once'\n\nexport type AnimationSpec = {\n  id: string // exact filename, e.g., "Manny_Swim.glb"\n  path: string // relative URL under public, e.g., "/models/animations/Manny_Swim.glb"\n  clipIndex?: number // which clip to use from the GLB; defaults to 0\n  clipName?: string // preferred clip name when GLB contains multiple\n  loop: LoopPolicy // repeat or once\n  speed?: number // playback speed multiplier\n}\n\nconst BASE = (import.meta as any).env?.BASE_URL || '/'\n// Use concatenation to avoid nested backticks in this generator template\nconst p = (file: string) => BASE + 'models/animations/' + file\n\nexport const ANIMATIONS: AnimationSpec[] = [\n`

const footer = `]\n\nexport const DEFAULT_ANIMATION_ID = 'Stand.glb'\n`

function toSpec(id) {
  return `  { id: '${id}', path: p('${id}'), loop: 'repeat', speed: 0.5 }`
}

function run() {
  const files = readdirSync(ANIMS_DIR)
    .filter(f => f.toLowerCase().endsWith('.glb'))
    .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }))

  const body = files.map(toSpec).join(',\n') + '\n'
  const content = header + body + footer
  writeFileSync(OUT_FILE, content, 'utf8')
  console.log(`[gen] Wrote ${files.length} animations to ${OUT_FILE}`)
}

run()
