// Generates src/shared/buildInfo.ts with build metadata (commit SHA, timestamp, env)
// Runs before Vite build via npm prebuild script
import { execSync } from 'node:child_process'
import { writeFileSync, mkdirSync } from 'node:fs'
import { dirname, resolve } from 'node:path'

function safeExec(cmd) {
  try {
    return execSync(cmd, { stdio: ['ignore', 'pipe', 'ignore'] }).toString().trim()
  } catch {
    return ''
  }
}

const nowIso = new Date().toISOString()
const fullSha = process.env.VERCEL_GIT_COMMIT_SHA || safeExec('git rev-parse HEAD') || 'unknown'
const shortSha = fullSha && fullSha !== 'unknown' ? fullSha.substring(0, 7) : 'unknown'
const vercelUrl = process.env.VERCEL_URL || ''
const vercelEnv = process.env.VERCEL_ENV || ''
const gitBranch = process.env.VERCEL_GIT_COMMIT_REF || safeExec('git rev-parse --abbrev-ref HEAD') || ''

const outPath = resolve(process.cwd(), 'src/shared/buildInfo.ts')
mkdirSync(dirname(outPath), { recursive: true })

const file = `// AUTO-GENERATED by scripts/write-build-info.mjs
// Do not edit manually. Regenerated on each build.
export const BUILD_TIME = '${nowIso}' as const
export const GIT_SHA = '${shortSha}' as const
export const GIT_SHA_FULL = '${fullSha}' as const
export const GIT_BRANCH = '${gitBranch}' as const
export const VERCEL_URL = '${vercelUrl}' as const
export const VERCEL_ENV = '${vercelEnv}' as const
`

writeFileSync(outPath, file, { encoding: 'utf8' })
console.log(`[build-info] Wrote ${outPath}: sha=${shortSha} time=${nowIso} branch=${gitBranch}`)

// Also write a static JSON file accessible without JS to verify prod deploys
try {
  const publicJsonPath = resolve(process.cwd(), 'public/version.json')
  mkdirSync(dirname(publicJsonPath), { recursive: true })
  const json = {
    buildTime: nowIso,
    gitSha: fullSha,
    gitShaShort: shortSha,
    gitBranch,
    vercelUrl,
    vercelEnv,
  }
  writeFileSync(publicJsonPath, JSON.stringify(json, null, 2), { encoding: 'utf8' })
  console.log(`[build-info] Wrote ${publicJsonPath}`)
} catch (e) {
  console.warn('[build-info] Failed to write public/version.json', e)
}
