#!/bin/sh
#
# Pre-commit hook to protect critical development configuration files
# This hook prevents accidental breaking changes to dev server setup
#

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo "${GREEN}üîç Checking development configuration integrity...${NC}"

# Critical files that affect dev server functionality
CRITICAL_FILES="
package.json
next.config.js
tsconfig.json
tailwind.config.ts
src/app/layout.tsx
"

# Files being committed
STAGED_FILES=$(git diff --cached --name-only)

# Function to check if a file is in the staged changes
file_is_staged() {
    echo "$STAGED_FILES" | grep -q "^$1$"
}

# Check each critical file for potentially breaking changes
for file in $CRITICAL_FILES; do
    if file_is_staged "$file"; then
        echo "${YELLOW}‚ö†Ô∏è  Checking changes to critical file: $file${NC}"
        
        case $file in
            "package.json")
                # Check if dev script was removed or significantly changed
                if git diff --cached "$file" | grep -q '^\-.*"dev"'; then
                    echo "${RED}‚ùå Error: Changes to 'dev' script detected in package.json${NC}"
                    echo "This could break the development server. Please review carefully."
                    echo "If intentional, run: git commit --no-verify"
                    exit 1
                fi
                
                # Check for removal of critical dependencies
                if git diff --cached "$file" | grep -q '^\-.*"next"\|^\-.*"react"'; then
                    echo "${RED}‚ùå Error: Critical dependency removal detected${NC}"
                    echo "Removing Next.js or React could break the application."
                    exit 1
                fi
                ;;
                
            "next.config.js")
                # Check for syntax that might break the config
                if git show ":$file" | node -c -; then
                    :  # File is valid JavaScript
                else
                    echo "${RED}‚ùå Error: Invalid JavaScript syntax in next.config.js${NC}"
                    exit 1
                fi
                ;;
                
            "tsconfig.json")
                # Check for valid JSON syntax
                if git show ":$file" | python -m json.tool > /dev/null 2>&1; then
                    :  # File is valid JSON
                else
                    echo "${RED}‚ùå Error: Invalid JSON syntax in tsconfig.json${NC}"
                    exit 1
                fi
                ;;
        esac
        
        echo "${GREEN}‚úÖ $file changes look safe${NC}"
    fi
done

# Run health check on the current state
echo "${GREEN}üè• Running development health check...${NC}"
if node scripts/dev-health-check.js > /dev/null 2>&1; then
    echo "${GREEN}‚úÖ Development environment health check passed${NC}"
else
    echo "${YELLOW}‚ö†Ô∏è  Development health check found issues${NC}"
    echo "Run 'npm run dev:check' for details"
    echo "Run 'npm run dev:fix' to attempt automatic fixes"
    echo "Use 'git commit --no-verify' to bypass this check if needed"
fi

echo "${GREEN}üöÄ Pre-commit checks completed successfully!${NC}"
exit 0